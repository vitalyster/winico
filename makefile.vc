# Makefile.vc for WinIco-extension
#
# This makefile builds winicoxx.dll, a small extension to have
# dynamic loadable icons for a toplevel as a dynamically
# loadable Tk extension.  This makefile is suitable for use with
# Microsoft Visual C++ 4.0/5.0.
#
# hacked from Jeff Hobb's "tkTable"
#        and Tom Poindexter's "OraTcl"
#
# TkWinIco requires access "tkWin.h" to build on Windows
# so be sure to have installed it on your machine


WINICO_NAME=Winico
DLL_BASE=winico
WINICO_MAJOR   =0
WINICO_MINOR   =4
WINICO_VERSION = 0.4
TCL_DLL_VERSION = 80
ICO_DLL_VERSION = 04
PROJECT	= $(DLL_BASE)$(ICO_DLL_VERSION)
PROJECT_DLL=$(PROJECT).dll

#
# Project directories -- these may need to be customized for your site
#
# ROOT --	location of the example files.
# TMPDIR --	location for .obj files.
# TOOLS32 --	location of VC++ compiler installation.
# TCLDEV --	location where Tcl is installed.
# TCL_VERSION -- dir of the tcl-sources
# TK_VERSION  -- dir of the tk-sources
# WISH_VERSION -- version info of the wish binary
#

ROOT		= .
TMPDIR		= .
TOOLS32		= c:\progra~1\devstudio\vc
# Set your version of Tcl
# Set TCLDEV to point to a directory that has Tcl/Tk SOURCES
TCLDEV= C:\tcldev
# Set the right versions
TCL_VERSION=8.0
# 
TK_VERSION=8.0
#
WISH_VERSION=80

TCL_DIR=$(TCLDEV)\tcl$(TCL_VERSION)
TK_DIR=$(TCLDEV)\tk$(TK_VERSION)
BINDIR=$(TCLDEV)\bin
TCL_LIB=$(BINDIR)\tcl$(TCL_DLL_VERSION).lib
TK_LIB=$(BINDIR)\tk$(TCL_DLL_VERSION).lib
WISH= \progra~1\Tcl\bin\wish$(WISH_VERSION)
#WISH= \tcldev\bin\wishd80
#DEBWISH=msdev.exe ..\bin\wish$(WISH_VERSION).exe
# comment the following line to compile with symbols
NODEBUG=1

#
# Visual C++ tools
#

PATH=$(TOOLS32)\bin;$(PATH)

cc32	= $(TOOLS32)\bin\cl -I$(TOOLS32)\include
rc32    = $(TOOLS32)\bin\rc.exe
CP      = copy
RM      = del

INCLUDES = -I$(TOOLS32)\include -I$(TCL_DIR)\generic -I$(TK_DIR)\generic -I$(TK_DIR)\win -I$(TK_DIR)\xlib
DEFINES = -nologo $(DEBUGDEFINES) -DWINICO_NAME=\"$(WINICO_NAME)\" -DWINICO_VERSION=\"$(WINICO_VERSION)\"
RCDEFINES = -dWINICO_NAME=\"$(WINICO_NAME)\" -dWINICO_VERSION=\"$(WINICO_VERSION)\" -dICO_DLL_VERSION=\"$(ICO_DLL_VERSION)\" 


#LIBS	= $(TCL_DIR)\win\tcl$(TCL_LIB_V).lib $(TK_DIR)\win\tk$(TK_LIB_V).lib
#LIBS	= $(TCLDEV)\bin\tcl80.lib $(TCLDEV)\bin\tk80.lib
LIBS	= $(TCL_LIB) $(TK_LIB)

!include <ntwin32.mak>

# 
# Global makefile settings
#

DLLOBJS = $(TMPDIR)\tkwinico.obj

# Targets

all: $(PROJECT_DLL)


test: pkgIndex.tcl
	@"$(WISH)" <<
		console show
		wm withdraw .
		set autopath [linsert [set auto_path] 0 $(ROOT)]
		set dir [pwd]
		source pkgIndex.tcl
		update
		package require -exact $(WINICO_NAME) $(WINICO_VERSION)
		puts "after require"
		update
		if ![catch {winico load hand} msg] {
		    puts "1st Exclamation Test passed."
                    console eval "wm geometry . 50x25+0+0"
                    wm deiconify .
                    update
                    raise .;
                    wm geometry . +400+0
                    update
                    winico setwindow . [set msg]
                    puts "you should see a exclamation icon in \".\""
                    update
                    after 4000
                    set l [winico load leo $(PROJECT_DLL)]
                    winico setwindow . [set l]
                    puts "you should see a leo icon in \".\""
                    update
                    after 4000
		    source testico.tcl
                    puts stderr "you should see a red smiley in \".\""
                    puts "and a yellow smiley in the Task-List"
                    puts "now go to the taskbar status area"
                    puts "and move the mouse over the smiley"
		    after 20000 "exit 0"
		} else {
		    puts "[set msg]:$(PROJECT) failed to load and run"
		    after 5000 "exit 1"
		}
<<

pkgIndex.tcl: $(PROJECT_DLL)
	"$(WISH)" <<
		console show
		wm withdraw .
		pkg_mkIndex $(ROOT) $(PROJECT_DLL)
		puts stderr "package index created"
		after 5000 "exit 0"
<<


#I use guilibsmt to prevent a runtime error if someone has only borland 
#compiled Tcl
$(PROJECT_DLL): $(DLLOBJS) tkwinico.res
	$(link) $(linkdebug) $(dlllflags) $(LIBS) \
		$(guilibsmt) tkwinico.res -out:$(PROJECT_DLL) $(DLLOBJS)

# Implicit Targets
#I use cvarsmt to prevent a runtime error if someone has only borland compiled
#Tcl
.c.obj:
	$(cc32) $(cdebug) $(cflags) $(cvarsmt) $(INCLUDES) \
		$(DEFINES) -Fo$(TMPDIR)\ $<

.rc.res:
	$(rc32) -fo $@ -r $(RCDEFINES) $<

distclean:
	-$(RM) $(TMPDIR)\*.obj
	-$(RM) $(TMPDIR)\*.res
	-$(RM) $(PROJECT).lib
	-$(RM) $(PROJECT).exp
	-$(RM) $(PROJECT).zip
	-$(RM) pkgIndex.tcl
dist: all distclean
	zip $(PROJECT).zip license.terms makefile *.tek *.tcl *.dll *.txt *.rc *.c *.ico Readme 
        tclsh80 zipadd.tcl $(PROJECT).zip teki
        tclsh80 zipadd.tcl $(PROJECT).zip bin
	

clean:	distclean
	-$(RM) $(PROJECT_DLL)

